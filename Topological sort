#include <stdio.h>
#include <ctype.h>

#define MAX_NODES 26 
int graph[MAX_NODES][MAX_NODES] = {0};
int visited[MAX_NODES] = {0};
int order[MAX_NODES], orderIndex;
int n = 0;
void dfs(int v) {
    visited[v] = 1;
    
    for (int i = 0; i < MAX_NODES; i++) {
        if (graph[v][i] && !visited[i]) {
            dfs(i);
        }
    }
    
    order[orderIndex--] = v;
}
void topologicalSort() {
    orderIndex = n - 1;
    for (int i = 0; i < MAX_NODES; i++) {
        visited[i] = 0;
    }
    for (int i = 0; i < MAX_NODES; i++) {
        if (!visited[i] && (i < n)) {  // Only process nodes that exist
            dfs(i);
        }
    }
    printf("Topological Order: ");
    for (int i = 0; i < n; i++) {
        printf("%c ", order[i] + 'A');
    }
    printf("\n");
}
int main() {
    char src, dest;
    int edges;
    printf("Enter number of nodes (1-26): ");
    scanf("%d", &n);
    printf("Enter number of edges: ");
    scanf("%d", &edges);
    printf("Enter edges (A B means A -> B):\n");
    for (int i = 0; i < edges; i++) {
        scanf(" %c %c", &src, &dest);  // Note space before %c to skip whitespace
        src = toupper(src) - 'A';
        dest = toupper(dest) - 'A';
        graph[src][dest] = 1;
    }
    topologicalSort();
    return 0;
}

OUTPUT:
Enter number of nodes (1-26): 8
Enter number of edges: 9
Enter edges (A B means A -> B):
A D
B A
B D
D C
D E
F E
G D
G F 
H F
Topological Order: H G F B A D E C 
